generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id              Int      @id @default(autoincrement())
  username        String   @db.VarChar(100)
  email           String   @unique @db.VarChar(100)
  password        String   @db.VarChar(255)
  role            Role
  registeredDate  DateTime @default(now()) @map("registered_date")
  teams           Team[]
  eventInscriptions EventInscriptions[]
  teamUsers       TeamUsers[]
  status         UserStatus
  firstMatches   Match[] @relation("Match_firstUser")
  secondMatches  Match[] @relation("Match_secondUser")
  eventsWon       Event[] @relation("UserWinner")
}
enum UserStatus {
  A
  D
}
enum Role {
  P
  O
  A
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String  @db.VarChar(250)
  maxPlayers  Int     @db.Int
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  model       Model
  status      Status   @default(P)
  matchsQuantity Int?
  keysQuantity Int?
  multiplayer Boolean
  eventInscriptions EventInscriptions[]
  matches      Match[]

  winnerUserId     Int?
  winnerUser       User?    @relation("UserWinner", fields: [winnerUserId], references: [id], onDelete: SetNull)

}

enum Model {
  P
  O
}

enum Status {
  E
  S
  P
}

model Team {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(100)
  ownerId        Int
  description    String?  @db.VarChar(250)
  registeredDate DateTime @default(now()) @map("registered_date")
  owner          User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  teamUsers      TeamUsers[]
  EventInscriptions    EventInscriptions[]
  firstMatches   Match[] @relation("Match_firstTeam")
  secondMatches  Match[] @relation("Match_secondTeam")
}

model EventInscriptions {
  id             Int      @id @default(autoincrement())
  userId         Int?
  teamId          Int?
  eventId        Int
  registeredDate DateTime @default(now()) @map("registered_date")
  status        InscriptionStatus @default(P)
  role          EventRole @default(P)
  user          User?     @relation(fields: [userId], references: [id],  onDelete: Cascade)
  event         Event    @relation(fields: [eventId], references: [id],  onDelete: Cascade)
  team           Team?  @relation(fields: [teamId], references: [id],  onDelete: Cascade)
  @@unique([userId, eventId])
}

enum InscriptionStatus {
  P
  C
  D
}

enum EventRole{
  O
  P
}

model TeamUsers {
  id              Int      @id @default(autoincrement())
  userId          Int @unique
  teamId          Int
  inscriptionDate DateTime @default(now()) @map("inscription_date")
  status         InscriptionStatus @default(P)
  user           User @relation(fields: [userId], references: [id],  onDelete: Cascade)
  team           Team @relation(fields: [teamId], references: [id],  onDelete: Cascade)
}

model Match {
  id          Int      @id @default(autoincrement())
  eventId     Int
  matchNumber Int
  keyNumber   Int
  firstTeamId Int?
  secondTeamId Int?
  firstUserId Int?
  secondUserId Int?
  time        DateTime?
  winnerId    Int?
  loserId     Int?
  event       Event @relation(fields: [eventId], references: [id],  onDelete: Cascade)
  firstTeam   Team?  @relation(fields: [firstTeamId], references: [id], name: "Match_firstTeam",  onDelete: Cascade)
  secondTeam  Team?  @relation(fields: [secondTeamId], references: [id], name: "Match_secondTeam",  onDelete: Cascade)
  firstUser   User?  @relation(fields: [firstUserId], references: [id], name: "Match_firstUser",  onDelete: Cascade)
  secondUser  User?  @relation(fields: [secondUserId], references: [id], name: "Match_secondUser",  onDelete: Cascade)
}
